name: Deploy Dev Environment

on:
  workflow_dispatch:
  # Uncomment to enable automatic deployment on push to main
  push:
    branches:
      - main

# Set up permissions for deploying with secretless Azure federated credentials
permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      RES_GROUP: ${{ vars.RES_GROUP }}
      ACR_NAME: ${{ vars.ACR_NAME }}
      ACI_NAME: ${{ vars.ACI_NAME }}
      AKV_NAME: ${{ vars.AKV_NAME }}
      WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Azure 
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_NAME }}:latest \
            -f src/Dockerfile \
            --push \
            src/

      - name: Get Log Analytics workspace credentials
        id: log-analytics
        run: |
          WORKSPACE_ID=$(az monitor log-analytics workspace show \
            --resource-group ${{ env.RES_GROUP }} \
            --workspace-name ${{ env.WORKSPACE_NAME }} \
            --query customerId -o tsv)

          WORKSPACE_KEY=$(az monitor log-analytics workspace get-shared-keys \
            --resource-group ${{ env.RES_GROUP }} \
            --workspace-name ${{ env.WORKSPACE_NAME }} \
            --query primarySharedKey -o tsv)

          echo "workspace-id=$WORKSPACE_ID" >> $GITHUB_OUTPUT
          echo "::add-mask::$WORKSPACE_KEY"
          echo "workspace-key=$WORKSPACE_KEY" >> $GITHUB_OUTPUT

      - name: Get managed identity
        id: identity
        run: |
          USER_IDENTITY_ID=$(az identity list --query "[?clientId=='$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-CLIENT-ID --query value -o tsv)'].id | [0]" -o tsv)
          echo "user-identity-id=$USER_IDENTITY_ID" >> $GITHUB_OUTPUT

      - name: Delete existing container instance
        run: |
          az container delete \
            --resource-group ${{ env.RES_GROUP }} \
            --name ${{ env.ACI_NAME }} \
            --yes || true
        continue-on-error: true

      - name: Deploy to Azure Container Instances
        run: |
          az container create \
            --resource-group ${{ env.RES_GROUP }} \
            --name ${{ env.ACI_NAME }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_NAME }}:latest \
            --log-analytics-workspace ${{ steps.log-analytics.outputs.workspace-id }} \
            --log-analytics-workspace-key ${{ steps.log-analytics.outputs.workspace-key }} \
            --registry-login-server ${{ env.ACR_NAME }}.azurecr.io \
            --registry-username $(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name ${{ env.ACR_NAME }}-pull-usr --query value -o tsv) \
            --registry-password $(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name ${{ env.ACR_NAME }}-pull-pwd --query value -o tsv) \
            --secure-environment-variables \
              PORT=80 \
              RUNNING_IN_PRODUCTION=true \
              AZURE_CLIENT_ID=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-CLIENT-ID --query value -o tsv) \
              AZURE_AI_CHAT_DEPLOYMENT_NAME=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-AI-CHAT-DEPLOYMENT-NAME --query value -o tsv) \
              AZURE_AI_EMBED_DEPLOYMENT_NAME=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-AI-EMBED-DEPLOYMENT-NAME --query value -o tsv) \
              AZURE_AI_EMBED_DIMENSIONS=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-AI-EMBED-DIMENSIONS --query value -o tsv) \
              AZURE_AI_SEARCH_ENDPOINT=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-AI-SEARCH-ENDPOINT --query value -o tsv) \
              AZURE_AI_SEARCH_INDEX_NAME=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-AI-SEARCH-INDEX-NAME --query value -o tsv) \
              AZURE_AI_SEARCH_API_KEY=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-AI-SEARCH-API-KEY --query value -o tsv) \
              AZURE_EXISTING_AIPROJECT_ENDPOINT=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-EXISTING-AIPROJECT-ENDPOINT --query value -o tsv) \
              AZURE_EXISTING_AIPROJECT_API_KEY=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-EXISTING-AIPROJECT-API-KEY --query value -o tsv) \
              AZURE_OPENAI_ENDPOINT=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-OPENAI-ENDPOINT --query value -o tsv) \
              AZURE_OPENAI_API_KEY=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-OPENAI-API-KEY --query value -o tsv) \
              ENABLE_AZURE_MONITOR_TRACING=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name ENABLE-AZURE-MONITOR-TRACING --query value -o tsv) \
              AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-TRACING-GEN-AI-CONTENT-RECORDING-ENABLED --query value -o tsv) \
              AZURE_TENANT_ID=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name AZURE-TENANT-ID --query value -o tsv) \
              APPINSIGHTS_CONNECTION_STRING=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name APPINSIGHTS-CONNECTION-STRING --query value -o tsv) \
              OTEL_TRACES_SAMPLER=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name OTEL-TRACES-SAMPLER --query value -o tsv) \
              OTEL_INSTRUMENTATION_GENAI_CAPTURE_MESSAGE_CONTENT=$(az keyvault secret show --vault-name ${{ env.AKV_NAME }} --name OTEL-INSTRUMENTATION-GENAI-CAPTURE-MESSAGE-CONTENT --query value -o tsv) \
            --assign-identity ${{ steps.identity.outputs.user-identity-id }} \
            --dns-name-label ai-chat-${{ env.ACR_NAME }} \
            --os-type Linux \
            --cpu 1 \
            --memory 1.5 \
            --ports 80 \
            --query "{FQDN:ipAddress.fqdn}" \
            --output table

      - name: Display deployment URL
        run: |
          echo "Deployment complete!"
          echo "Application URL: http://ai-chat-${{ env.ACR_NAME }}.${{ env.AZURE_LOCATION }}.azurecontainer.io"
